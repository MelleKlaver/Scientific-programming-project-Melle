e = ifelse(SACK == 0, 1, 1.000 - ((SACK / ATT) * ((S.YDS / SACK) + 3)))
f = ifelse(RUSH == 0, 0, ((R.YDS / RUSH) - 3) * 0.25)
g = 2.375 - ((FUMB/ATT)*3 + (FUMB.L/ATT)*22)
# Ensure that a,b,c & d are below 2.375, f is below 1 and that everything is above 0
a = pmin(a, 2.375)
a = pmax(a, 0)
b = pmin(b, 2.375)
b = pmax(b,0)
c = pmin(c, 2.375)
c = pmax(c,0)
d = pmax(d, 0)
e = pmax(e, 0)
f = pmin(f,1)
f = pmax(f,0)
g = pmax(g,0)
# Calculate the passer rating2.0
passer_rating2.0 = ((a + b + c + d + e + f + g) / 8.4) * 100
return(passer_rating2.0)
}
Quarterback_gamelogs$Passer.Rating2.0 = calculate_passer_rating2.0(Quarterback_gamelogs$Passes.Completed,Quarterback_gamelogs$Passes.Attempted, Quarterback_gamelogs$Passing.Yards, Quarterback_gamelogs$TD.Passes, Quarterback_gamelogs$Ints, Quarterback_gamelogs$Sacks, Quarterback_gamelogs$Sacked.Yards.Lost, Quarterback_gamelogs$Rushing.Attempts, Quarterback_gamelogs$Rushing.Yards, Quarterback_gamelogs$Fumbles, Quarterback_gamelogs$Fumbles.Lost)
Offensive_gamelog_Combined$QB_Passer.Rating2.0 = calculate_passer_rating2.0(Offensive_gamelog_Combined$QB_Passes.Completed,Offensive_gamelog_Combined$QB_Passes.Attempted, Offensive_gamelog_Combined$QB_Passing.Yards, Offensive_gamelog_Combined$QB_TD.Passes, Offensive_gamelog_Combined$QB_Ints, Offensive_gamelog_Combined$QB_Sacks, Offensive_gamelog_Combined$QB_Sacked.Yards.Lost, Offensive_gamelog_Combined$QB_Rushing.Attempts, Offensive_gamelog_Combined$QB_Rushing.Yards, Offensive_gamelog_Combined$QB_Fumbles, Offensive_gamelog_Combined$QB_Fumbles.Lost)
#Explorative statistics
#Stats_of_Interest = c(9:20,22:31,33:42,44:50)
#correlations <- cor(Offensive_gamelog_Combined$Offensive.Points, Offensive_gamelog_Combined[Stats_of_Interest])
#print(correlations)
#Regression results offense
regression_results_Offense = data.frame()
# Create a loop for all statistics in the offense that might have an effect on offensive production
Stats_of_Interest = c(9:20,23:32,34:43,45:52)
for (i in Stats_of_Interest) {
DV = "Offensive.Points"
IV = names(Offensive_gamelog_Combined)[i]
# Fit the regression model
model <- lm(paste(DV, "~", IV), data = Offensive_gamelog_Combined)
# Extract relevant information
intercept <- coef(model)[1]
coefficient <- coef(model)[2]
p_value <- summary(model)$coefficients[2, 4]
adj_r_squared <- summary(model)$adj.r.squared
# Add results to the dataframe
result_row <- data.frame(IV, intercept, coefficient, p_value, adj_r_squared)
regression_results_Offense <- rbind(regression_results_Offense, result_row)
}
# Round, order and print the regression results
regression_results_Offense$intercept = round(regression_results_Offense$intercept, digits = 3)
regression_results_Offense$coefficient = round(regression_results_Offense$coefficient, digits = 3)
regression_results_Offense$adj_r_squared = round(regression_results_Offense$adj_r_squared, digits = 3)
regression_results_Offense = regression_results_Offense[order(-regression_results_Offense$adj_r_squared), ]
print(regression_results_Offense)
# Create a bar chart using ggplot2
ggplot(head(regression_results_Offense, 10), aes(x = reorder(IV, -adj_r_squared), y = adj_r_squared)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Statistics", y = "adj_r_squared", title = "What stat has the biggest effect on offensive output") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#The following chooses the stats that we want to compare across ages
Age_stats_Columns_QB = c(15,17,20,21,23,31)
Age_stats_Columns_QB = colnames(Quarterback_gamelogs[Age_stats_Columns_QB])
#This code creates a dataframe in which the amount of average stats of each quarterback of a certain age is represented. Age groups with less than 100 games are excluded as that is a to small sample size
Age_stats_QB = Quarterback_gamelogs %>%
group_by(Age) %>%
summarize(
Games = n(),
across(Age_stats_Columns_QB,mean),
) %>%
ungroup() %>%
filter(Games >= 100)
#Create a plot showing the Ints, Sacks, Rushing attempts, Passes attempted and Offensive points
plot = ggplot(data = Age_stats_QB, aes(x = Age)) +
geom_line(aes(y = Ints, color = "Ints"), linetype = "solid") +
geom_line(aes(y = Sacks, color = "Sacks"), linetype = "solid") +
geom_line(aes(y = Rushing.Attempts, color = "Rushing Attempts"), linetype = "solid") +
geom_line(aes(y = Passes.Attempted / 10, color = "Passes Attempted"), linetype = "solid") +
geom_line(aes(y = Offensive.Points / 10, color = "Offensive Points"), linetype = "solid") +
labs(x = "Age", title = "Quarterback Statistics")
#Adds a y-axis on both the left and the right. The left Y-axis corresponds with the amount of Ints, Sacks and Rushing attempts. The right corresponds with the passes attempted and the offensive points.
plot = plot + scale_y_continuous(
name = "Amount of Ints, Sacks & Rushing attempts",
sec.axis = sec_axis(trans = ~ . * 10, name = "Amount of Offensive points & Passes attempted"),
breaks = seq(0.5, 3.5, by = 0.5),
limits = c(0.5, 3.5)
)
#Adds the x-axis and shows the amount of games played on each age
plot <- plot + scale_x_continuous(breaks = Age_stats_QB$Age[seq(1, nrow(Age_stats_QB), by = 4)],
labels = paste(Age_stats_QB$Age[seq(1, nrow(Age_stats_QB), by = 4)], "(", Age_stats_QB$Games[seq(1, nrow(Age_stats_QB), by = 5)], " games)"))
#Creates a functioning legend
custom_colors <- c("Ints" = "blue", "Rushing Attempts" = "red", "Sacks" = "green", "Passes Attempted" = "purple", "Offensive Points" = "orange")
plot <- plot + scale_color_manual(values = custom_colors)
plot = plot + theme(legend.position="top")
# Print the plot
print(plot)
regression_results <- data.frame()
# Loop through variable pairs
rows_to_regress = c(7,10,13,14,16)
for (i in rows_to_regress) {
DV <- names(Offensive_gamelog_QB)[i]
IV <- "QB_Age"
# Fit the regression model
model <- lm(paste(DV, "~", IV), data = Offensive_gamelog_QB)
# Extract relevant information
intercept <- coef(model)[1]
coefficient <- coef(model)[2]
p_value <- summary(model)$coefficients[2, 4]
adj_r_2 <- summary(model)$adj.r.squared
# Add results to the dataframe
result_row <- data.frame(DV, IV, intercept, coefficient, p_value, adj_r_2)
regression_results <- rbind(regression_results, result_row)
}
# Print or analyze the regression results
print(regression_results)
#Create Career stats
Career_stats <- Quarterback_gamelogs %>%
group_by(Name, Birthyear) %>%
summarise(
Wins = sum(Outcome == "W"),
Amount_of_games = n(),
Passing.Yards = sum(Passing.Yards),
Passes.Completed = sum(Passes.Completed),
Passes.Attempted = sum(Passes.Attempted),
Sacks = sum(Sacks),
Sacked.Yards.Lost = sum(Sacked.Yards.Lost),
Rushing.Attempts = sum(Rushing.Attempts),
Rushing.Yards = sum(Rushing.Yards),
Fumbles = sum(Fumbles),
Fumbles.Lost = sum(Fumbles.Lost),
Ints = sum(Ints),
TD.Passes = sum(TD.Passes),
Offensive.Points = mean(Offensive.Points)
) %>%
filter(Amount_of_games>=5)
Career_stats$Wins[is.na(Career_stats$Wins)] = 0
Career_stats$WinPercentage = floor(Career_stats$Wins/Career_stats$Amount_of_games *100)
Career_stats$Passer.Rating2.0 = calculate_passer_rating2.0(Career_stats$Passes.Completed,Career_stats$Passes.Attempted, Career_stats$Passing.Yards, Career_stats$TD.Passes, Career_stats$Ints, Career_stats$Sacks, Career_stats$Sacked.Yards.Lost, Career_stats$Rushing.Attempts, Career_stats$Rushing.Yards, Career_stats$Fumbles, Career_stats$Fumbles.Lost)
Career_stats$games_group = cut(Career_stats$Amount_of_games,
breaks = c(-Inf, 10, 150, Inf),
labels = c("Below 10", "10-150", "Above 150"))
color_mapping = c("Below 10" = "black", "10-150" = "blue", "Above 150" = "red")
ggplot(Career_stats, aes(x = WinPercentage, y = Passer.Rating2.0, color = games_group)) +
geom_point() +
scale_color_manual(values = color_mapping) +
labs(x = "WinPercentage", y = "Passer.Rating2.0") +
ggtitle("Scatter Plot of Passer Rating vs. Win Percentage")
# Divide the variables of interest by Amount_of_games
Career_stats_average <- Career_stats %>%
mutate(
Passing.Yards = Passing.Yards / Amount_of_games,
Passes.Completed = Passes.Completed / Amount_of_games,
Passes.Attempted = Passes.Attempted / Amount_of_games,
Sacks = Sacks / Amount_of_games,
Sacked.Yards.Lost = Sacked.Yards.Lost / Amount_of_games,
Rushing.Attempts = Rushing.Attempts / Amount_of_games,
Rushing.Yards = Rushing.Yards / Amount_of_games,
Fumbles = Fumbles / Amount_of_games,
Fumbles.Lost = Fumbles.Lost / Amount_of_games,
Ints = Ints / Amount_of_games,
TD.Passes = TD.Passes / Amount_of_games,
Generation = Birthyear + 28
)
Career_stats_average$Generation_Category <- cut(
Career_stats_average$Generation,
breaks = c(1960, 1980, 2000, Inf),
labels = c("1960-1980", "1980-2000", "> 2000")
)
## Select the numeric variables for PCA (excluding non-numeric and response variables)
variables_of_interest <- Career_stats_average[, c(
"Passes.Completed", "Passes.Attempted",
"Sacks", "Rushing.Attempts", "Fumbles", "Ints", "TD.Passes",
"Offensive.Points"
)]
# Standardize the data (mean center and scale)
standardized_data <- scale(variables_of_interest)
# Perform PCA
pca_result <- prcomp(standardized_data)
# Summary of PCA results
summary(pca_result)
# Variance explained by each principal component
var_explained <- pca_result$sdev^2 / sum(pca_result$sdev^2)
# Scree plot to visualize variance explained
scree_plot <- ggplot() +
geom_bar(aes(x = 1:length(var_explained), y = var_explained), stat = "identity") +
labs(x = "Principal Component", y = "Variance Explained") +
ggtitle("Scree Plot")
color_mapping <- c(
"1960-1980" = "blue",         # Between 1960 and 1980
"1980-2000" = "green",        # Between 1980 and 2000
"> 2000" = "purple"           # Bigger than 2000
)
pca_data <- data.frame(PC1 = pca_result$x[, 1], PC2 = pca_result$x[, 2], Generation = Career_stats_average$Generation)
pc1_pc2_plot <- ggplot(as.data.frame(pca_result$x), aes(x = PC1, y = PC2, color = Career_stats_average$Generation_Category)) +
geom_point() +
labs(x = "PC1", y = "PC2") +
ggtitle("PCA: PC1 vs. PC2") +
scale_color_manual(values = color_mapping)  # This line should be inside ggplot
# Print or visualize the PCA results and plots
print(pca_result)
print(scree_plot)
print(pc1_pc2_plot)
# Create a biplot
biplot(pca_result, scale = 0, col = c("white", "black"))
dependent_variable <- "Offensive.Points"
independent_variables <- names(Offensive_gamelog_Combined)[Stats_of_Interest]
# Construct the formula for multivariate regression
formula <- as.formula(paste(dependent_variable, "~", paste(independent_variables, collapse = " + ")))
# Fit the multivariate linear regression model
model <- lm(formula, data = Offensive_gamelog_Combined)
# Extract relevant information
coefficients <- coef(model)[-1]  # Exclude the intercept
p_values <- summary(model)$coefficients[-1, 4]
adj_r2 <- summary(model)$adj.r.squared
# Create a summary dataframe
result_summary <- data.frame(
IV = independent_variables,
Coefficient = coefficients,
P_Value = p_values,
Adj_R_Squared = adj_r2  # Changed to match the variable name you used later
)
# Initialize a vector to store the part R-squared values
part_r_squared <- numeric(length(independent_variables))
# Loop through the independent variables and calculate part R-squared
for (i in 1:length(independent_variables)) {
IV_to_remove <- independent_variables[i]
# Fit the model without the current variable
reduced_formula <- as.formula(paste(dependent_variable, "~", paste(setdiff(independent_variables, IV_to_remove), collapse = " + ")))
reduced_model <- lm(reduced_formula, data = Offensive_gamelog_Combined)
# Calculate the change in R-squared when the variable is removed
delta_r_squared <- Adj_R_Squared - summary(reduced_model)$r.squared
# Calculate the part R-squared for the current variable
part_r_squared[i] <- delta_r_squared
}
dependent_variable <- "Offensive.Points"
independent_variables <- names(Offensive_gamelog_Combined)[Stats_of_Interest]
# Construct the formula for multivariate regression
formula <- as.formula(paste(dependent_variable, "~", paste(independent_variables, collapse = " + ")))
# Fit the multivariate linear regression model
model <- lm(formula, data = Offensive_gamelog_Combined)
# Extract relevant information
coefficients <- coef(model)[-1]  # Exclude the intercept
p_values <- summary(model)$coefficients[-1, 4]
adj_r2 <- summary(model)$adj.r.squared
# Create a summary dataframe
result_summary <- data.frame(
IV = independent_variables,
Coefficient = coefficients,
P_Value = p_values,
adj_r2 = adj_r2  # Changed to match the variable name you used later
)
# Initialize a vector to store the part R-squared values
part_r_squared <- numeric(length(independent_variables))
# Loop through the independent variables and calculate part R-squared
for (i in 1:length(independent_variables)) {
IV_to_remove <- independent_variables[i]
# Fit the model without the current variable
reduced_formula <- as.formula(paste(dependent_variable, "~", paste(setdiff(independent_variables, IV_to_remove), collapse = " + ")))
reduced_model <- lm(reduced_formula, data = Offensive_gamelog_Combined)
# Calculate the change in R-squared when the variable is removed
delta_r_squared <- Adj_R_Squared - summary(reduced_model)$r.squared
# Calculate the part R-squared for the current variable
part_r_squared[i] <- delta_r_squared
}
dependent_variable <- "Offensive.Points"
independent_variables <- names(Offensive_gamelog_Combined)[Stats_of_Interest]
# Construct the formula for multivariate regression
formula <- as.formula(paste(dependent_variable, "~", paste(independent_variables, collapse = " + ")))
# Fit the multivariate linear regression model
model <- lm(formula, data = Offensive_gamelog_Combined)
# Extract relevant information
coefficients <- coef(model)[-1]  # Exclude the intercept
p_values <- summary(model)$coefficients[-1, 4]
adj_r2 <- summary(model)$adj.r.squared
# Create a summary dataframe
result_summary <- data.frame(
IV = independent_variables,
Coefficient = coefficients,
P_Value = p_values,
adj_r2 = adj_r2  # Changed to match the variable name you used later
)
# Initialize a vector to store the part R-squared values
part_r_squared <- numeric(length(independent_variables))
# Loop through the independent variables and calculate part R-squared
for (i in 1:length(independent_variables)) {
IV_to_remove <- independent_variables[i]
# Fit the model without the current variable
reduced_formula <- as.formula(paste(dependent_variable, "~", paste(setdiff(independent_variables, IV_to_remove), collapse = " + ")))
reduced_model <- lm(reduced_formula, data = Offensive_gamelog_Combined)
# Calculate the change in R-squared when the variable is removed
delta_r_squared <- Adj_R_Squared - summary(reduced_model)$r.squared
# Calculate the part R-squared for the current variable
part_r_squared[i] <- delta_r_squared
}
dependent_variable <- "Offensive.Points"
independent_variables <- names(Offensive_gamelog_Combined)[Stats_of_Interest]
# Construct the formula for multivariate regression
formula <- as.formula(paste(dependent_variable, "~", paste(independent_variables, collapse = " + ")))
# Fit the multivariate linear regression model
model <- lm(formula, data = Offensive_gamelog_Combined)
# Extract relevant information
coefficients <- coef(model)[-1]  # Exclude the intercept
p_values <- summary(model)$coefficients[-1, 4]
adj_r2 <- summary(model)$adj.r.squared
# Create a summary dataframe
result_summary <- data.frame(
IV = independent_variables,
Coefficient = coefficients,
P_Value = p_values,
adj_r2 = adj_r2  # Changed to match the variable name you used later
)
# Initialize a vector to store the part R-squared values
part_r_squared <- numeric(length(independent_variables))
# Loop through the independent variables and calculate part R-squared
for (i in 1:length(independent_variables)) {
IV_to_remove <- independent_variables[i]
# Fit the model without the current variable
reduced_formula <- as.formula(paste(dependent_variable, "~", paste(setdiff(independent_variables, IV_to_remove), collapse = " + ")))
reduced_model <- lm(reduced_formula, data = Offensive_gamelog_Combined)
# Calculate the change in R-squared when the variable is removed
delta_r_squared <- adj_r2 - summary(reduced_model)$r.squared
# Calculate the part R-squared for the current variable
part_r_squared[i] <- delta_r_squared
}
# Add part R-squared values to the result_summary dataframe
result_summary$Part_R_Squared <- part_r_squared
# Round, order, and print the updated regression results
result_summary$Coefficient <- round(result_summary$Coefficient, digits = 3)
result_summary$adj_r2 <- round(result_summary$adj_r2, digits = 3)
result_summary$Part_R_Squared <- round(result_summary$Part_R_Squared, digits = 3)
result_summary <- result_summary[order(-result_summary$Part_R_Squared), ]
knitr::kable(result_summary, row.names = FALSE, format = "markdown")
# Create a bar chart to visualize the part R-squared values
ggplot(head(result_summary, 10), aes(x = reorder(IV, -Part_R_Squared), y = Part_R_Squared)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Variables", y = "Part R-squared", title = "Individual Contribution of Variables to Offensive Output") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Round, order, and print the regression results
#result_summary$Coefficient <- round(result_summary$Coefficient, digits = 3)
#result_summary$Adj_R_Squared <- round(result_summary$Adj_R_Squared, digits = 3)
#result_summary <- result_summary[order(-result_summary$P_Value), ]
# Print the summary table
#print(result_summary)
#ggplot(head(result_summary, 10), aes(x = reorder(IV, -Adj_R_Squared), y = Adj_R_Squared)) +
# geom_bar(stat = "identity", fill = "blue") +
# labs(x = "Variables", y = "Adj_r_squared", title = "What stat is the best predictor for offensive output") +
# theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(result_summary)
# In this code, a regression model was used to assess the relationship between all offensive statistics and their impact on offensive point production.
regression_results_Offense = data.frame()
# Create a loop for all statistics in the offense that might have an effect on offensive production
Stats_of_Interest = c(9:20,23:32,34:43,45:52)
for (i in Stats_of_Interest) {
DV = "Offensive.Points"
IV = names(Offensive_gamelog_Combined)[i]
# Fit the regression model
model = lm(paste(DV, "~", IV), data = Offensive_gamelog_Combined)
# Extract relevant information
intercept = coef(model)[1]
coefficient = coef(model)[2]
p_value = summary(model)$coefficients[2, 4]
adj_r2 = summary(model)$adj.r.squared
# Add results to the dataframe
result_row = data.frame(IV, coefficient, intercept, p_value, adj_r2)
regression_results_Offense = rbind(regression_results_Offense, result_row)
}
# Round, order and print the regression results
regression_results_Offense$intercept = round(regression_results_Offense$intercept, digits = 3)
regression_results_Offense$coefficient = round(regression_results_Offense$coefficient, digits = 3)
regression_results_Offense$adj_r2 = round(regression_results_Offense$adj_r2, digits = 3)
regression_results_Offense = regression_results_Offense[order(-regression_results_Offense$adj_r2), ]
knitr::kable(regression_results_Offense, row.names = FALSE, format = "markdown")
# Create a bar chart using ggplot2
ggplot(head(regression_results_Offense, 10), aes(x = reorder(IV, -adj_r2), y = adj_r2)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Variables", y = "Adj_r_squared", title = "What stat is the best predictor for offensive output") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# In this code, a regression model was used to assess the relationship between all offensive statistics and their impact on offensive point production.
regression_results_Offense = data.frame()
# Create a loop for all statistics in the offense that might have an effect on offensive production
Stats_of_Interest = c(9:20,23:32,34:43,45:52)
for (i in Stats_of_Interest) {
DV = "Offensive.Points"
IV = names(Offensive_gamelog_Combined)[i]
# Fit the regression model
model = lm(paste(DV, "~", IV), data = Offensive_gamelog_Combined)
# Extract relevant information
intercept = coef(model)[1]
coefficient = coef(model)[2]
p_value = summary(model)$coefficients[2, 4]
adj_r2 = summary(model)$adj.r.squared
# Add results to the dataframe
result_row = data.frame(IV, coefficient, intercept, p_value, adj_r2)
regression_results_Offense = rbind(regression_results_Offense, result_row)
}
# Round, order and print the regression results
regression_results_Offense$intercept = round(regression_results_Offense$intercept, digits = 3)
regression_results_Offense$coefficient = round(regression_results_Offense$coefficient, digits = 3)
regression_results_Offense$adj_r2 = round(regression_results_Offense$adj_r2, digits = 3)
regression_results_Offense = regression_results_Offense[order(-regression_results_Offense$adj_r2), ]
knitr::kable(regression_results_Offense, row.names = FALSE, format = "markdown")
# Create a bar chart using ggplot2
ggplot(head(regression_results_Offense, 10), aes(x = reorder(IV, -adj_r2), y = adj_r2)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Variables", y = "Adj_r_squared", title = "What stat is the best predictor for offensive output") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dependent_variable <- "Offensive.Points"
independent_variables <- names(Offensive_gamelog_Combined)[Stats_of_Interest]
# Construct the formula for multivariate regression
formula <- as.formula(paste(dependent_variable, "~", paste(independent_variables, collapse = " + ")))
# Fit the multivariate linear regression model
model <- lm(formula, data = Offensive_gamelog_Combined)
# Extract relevant information
coefficients <- coef(model)[-1]  # Exclude the intercept
p_values <- summary(model)$coefficients[-1, 4]
adj_r2 <- summary(model)$adj.r.squared
# Create a summary dataframe
result_summary <- data.frame(
IV = independent_variables,
Coefficient = coefficients,
P_Value = p_values,
adj_r2 = adj_r2  # Changed to match the variable name you used later
)
# Initialize a vector to store the part R-squared values
part_r_squared <- numeric(length(independent_variables))
# Loop through the independent variables and calculate part R-squared
for (i in 1:length(independent_variables)) {
IV_to_remove <- independent_variables[i]
# Fit the model without the current variable
reduced_formula <- as.formula(paste(dependent_variable, "~", paste(setdiff(independent_variables, IV_to_remove), collapse = " + ")))
reduced_model <- lm(reduced_formula, data = Offensive_gamelog_Combined)
# Calculate the change in R-squared when the variable is removed
delta_r_squared <- adj_r2 - summary(reduced_model)$r.squared
# Calculate the part R-squared for the current variable
part_r_squared[i] <- delta_r_squared
}
# Add part R-squared values to the result_summary dataframe
result_summary$Part_R_Squared <- part_r_squared
# Round, order, and print the updated regression results
result_summary$Coefficient <- round(result_summary$Coefficient, digits = 3)
result_summary$adj_r2 <- round(result_summary$adj_r2, digits = 3)
result_summary$Part_R_Squared <- round(result_summary$Part_R_Squared, digits = 3)
result_summary <- result_summary[order(-result_summary$Part_R_Squared), ]
knitr::kable(result_summary, row.names = FALSE, format = "markdown")
# Create a bar chart to visualize the part R-squared values
ggplot(head(result_summary, 10), aes(x = reorder(IV, -Part_R_Squared), y = Part_R_Squared)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Variables", y = "Part R-squared", title = "Individual Contribution of Variables to Offensive Output") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Round, order, and print the regression results
#result_summary$Coefficient <- round(result_summary$Coefficient, digits = 3)
#result_summary$Adj_R_Squared <- round(result_summary$Adj_R_Squared, digits = 3)
#result_summary <- result_summary[order(-result_summary$P_Value), ]
# Print the summary table
#print(result_summary)
#ggplot(head(result_summary, 10), aes(x = reorder(IV, -Adj_R_Squared), y = Adj_R_Squared)) +
# geom_bar(stat = "identity", fill = "blue") +
# labs(x = "Variables", y = "Adj_r_squared", title = "What stat is the best predictor for offensive output") +
# theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Divide the variables of interest by Amount_of_games
Career_stats_average <- Career_stats %>%
mutate(
Passing.Yards = Passing.Yards / Amount_of_games,
Passes.Completed = Passes.Completed / Amount_of_games,
Passes.Attempted = Passes.Attempted / Amount_of_games,
Sacks = Sacks / Amount_of_games,
Sacked.Yards.Lost = Sacked.Yards.Lost / Amount_of_games,
Rushing.Attempts = Rushing.Attempts / Amount_of_games,
Rushing.Yards = Rushing.Yards / Amount_of_games,
Fumbles = Fumbles / Amount_of_games,
Fumbles.Lost = Fumbles.Lost / Amount_of_games,
Ints = Ints / Amount_of_games,
TD.Passes = TD.Passes / Amount_of_games,
Generation = Birthyear + 28
)
Career_stats_average$Generation_Category <- cut(
Career_stats_average$Generation,
breaks = c(1960, 1980, 2000, Inf),
labels = c("1960-1980", "1980-2000", "> 2000")
)
## Select the numeric variables for PCA (excluding non-numeric and response variables)
variables_of_interest <- Career_stats_average[, c(
"Passes.Completed", "Passes.Attempted",
"Sacks", "Rushing.Attempts", "Fumbles", "Ints", "TD.Passes",
"Offensive.Points"
)]
# Standardize the data (mean center and scale)
standardized_data <- scale(variables_of_interest)
# Perform PCA
pca_result <- prcomp(standardized_data)
# Summary of PCA results
summary(pca_result)
# Variance explained by each principal component
var_explained <- pca_result$sdev^2 / sum(pca_result$sdev^2)
# Scree plot to visualize variance explained
scree_plot <- ggplot() +
geom_bar(aes(x = 1:length(var_explained), y = var_explained), stat = "identity") +
labs(x = "Principal Component", y = "Variance Explained") +
ggtitle("Scree Plot")
color_mapping <- c(
"1960-1980" = "blue",         # Between 1960 and 1980
"1980-2000" = "green",        # Between 1980 and 2000
"> 2000" = "purple"           # Bigger than 2000
)
pca_data <- data.frame(PC1 = pca_result$x[, 1], PC2 = pca_result$x[, 2], Generation = Career_stats_average$Generation)
pc1_pc2_plot <- ggplot(as.data.frame(pca_result$x), aes(x = PC1, y = PC2, color = Career_stats_average$Generation_Category)) +
geom_point() +
labs(x = "PC1", y = "PC2") +
ggtitle("PCA: PC1 vs. PC2") +
scale_color_manual(values = color_mapping)  # This line should be inside ggplot
# Print or visualize the PCA results and plots
print(pca_result)
print(scree_plot)
print(pc1_pc2_plot)
# Create a biplot
biplot(pca_result, scale = 0, col = c("white", "black"))
View(Career_stats)
View(Career_stats_average)
